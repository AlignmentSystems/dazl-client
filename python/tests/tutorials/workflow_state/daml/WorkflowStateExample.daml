daml 1.0
module WorkflowStateExample where

-- The "Workflow State Contract" Best Practice.
-- 
-- Purpose: To encapsulate the state of a workflow within a contract. This results in easier 
-- development & debugging because workflow milestones are clearly defined 

template GenesisContract
  with
    operator: Party
  where
    signatory operator

    controller operator can
      anytime SetInitialWorkflowState
        returning ContractId WorkflowSetupInProgress
        to create WorkflowSetupInProgress with operator=operator
      anytime InviteTicketBuyer with ticketBuyer: Party
        returning ContractId TicketBuyerInvitation
        to do
          create TicketBuyerInvitation with operator; ticketBuyer;
      anytime InviteTicketSeller with ticketSeller: Party
        returning ContractId TicketSellerInvitation
        to create TicketSellerInvitation with operator; ticketSeller;

template TicketBuyerInvitation
  with
    operator: Party
    ticketBuyer: Party
  where
    signatory operator

    controller ticketBuyer can
      AcceptTicketBuyerInvitation
        returning ContractId TicketBuyerRole
        to create TicketBuyerRole with ticketBuyer; operator;
 
template TicketBuyerRole
  with
    ticketBuyer: Party
    operator: Party
  where
    signatory ticketBuyer

template TicketSellerInvitation
  with
    operator: Party
    ticketSeller: Party
  where
    signatory operator

    controller ticketSeller can
      AcceptTicketSellerInvitation
        returning ContractId TicketSellerRole
        to create TicketSellerRole with ticketSeller; operator;

template TicketSellerRole
  with 
    ticketSeller: Party
    operator: Party
  where
    signatory ticketSeller

    controller ticketSeller can
      anytime OfferTicketPurchaseAgreement with ticketBuyer: Party
        returning ContractId TicketPurchaseAgreementOffer 
        to create TicketPurchaseAgreementOffer with ticketSeller; ticketBuyer; operator;

template TicketPurchaseAgreementOffer
  with
    ticketSeller: Party
    ticketBuyer: Party
    operator: Party
  where
    signatory ticketSeller

    controller ticketBuyer can
      PurchaseTicket
        returning ContractId TicketPurchaseAgreement
        to create TicketPurchaseAgreement with ticketSeller; ticketBuyer; operator;

template TicketPurchaseAgreement
  with
    ticketSeller: Party
    ticketBuyer: Party
    operator: Party

  where
    signatory ticketSeller
    signatory ticketBuyer
    agreement toText ticketBuyer <> " agrees to purchase ticket from " <> toText ticketSeller 

-- Workflow state 1 of 3
template WorkflowSetupInProgress
  with
    operator: Party
  where
    signatory operator

    controller operator can
      TicketTransactionsInProgress
        returning ContractId WorkflowTicketTransactionsInProgress
        to create WorkflowTicketTransactionsInProgress with operator

-- Workflow state 2 of 3
template WorkflowTicketTransactionsInProgress
  with 
    operator: Party
  where
    signatory operator

    controller operator can
      WorkflowCompleted
        returning ContractId WorkflowCompleted
        to create WorkflowCompleted with operator

-- Workflow state 3 of 3
template WorkflowCompleted
  with 
    operator: Party
  where
    signatory operator

test ticketTransactionTest = 
  scenario
    -- create the genesis contract
    genesisContract <- 'Operator' commits create GenesisContract with operator='Operator'
    -- set the initial workflow state (InviteParticipantsInProgress)
    workflowSetupInProgress <- 'Operator' commits exercise genesisContract SetInitialWorkflowState

    -- initial state: InviteParticipantsInProgress
    -- operator shall invite all the participants to the workflow, and respective participant role contracts 
    -- shall be created

    -- note: scenarios list actions in series, but these actions do not have a guaranteed order when running on the Platform 

    ticketSellerInvitation <- 'Operator' commits exercise genesisContract InviteTicketSeller with ticketSeller='Bob'
    ticketSellerRole <- 'Bob' commits exercise ticketSellerInvitation AcceptTicketSellerInvitation

    ticketBuyerInvitation <- 'Operator' commits exercise genesisContract InviteTicketBuyer with ticketBuyer='Alice'
    ticketBuyerRole <- 'Alice' commits exercise ticketBuyerInvitation AcceptTicketBuyerInvitation
    
    -- next state: TicketTransactionsInProgress
    -- the application must detect when this state transition can occur, and then perform this exercise
    workflowTicketTransactionsInProgress <- 'Operator' commits exercise workflowSetupInProgress TicketTransactionsInProgress

    -- In this phase of the workflow, one or more ticket purchases may occur

    -- a ticket is purchsed
    offerTicketPurchaseAgreement <- 'Bob' commits exercise ticketSellerRole OfferTicketPurchaseAgreement with ticketBuyer='Alice'
    'Alice' commits exercise offerTicketPurchaseAgreement PurchaseTicket

    -- ...more ticket purchases may occur here
    
    -- next state: WorkflowCompleted
    -- the application must detect when this state transition shall occur, and then perform this exercise
    workflowCompleted <- 'Operator' commits exercise workflowTicketTransactionsInProgress WorkflowCompleted

    return {
      genesisContract=genesisContract;
      ticketBuyerInvitation=ticketBuyerInvitation;
      ticketBuyerRole=ticketBuyerRole;
      ticketSellerInvitation=ticketSellerInvitation;
      ticketSellerRole=ticketSellerRole;
      workflowCompleted=workflowCompleted;
    }



