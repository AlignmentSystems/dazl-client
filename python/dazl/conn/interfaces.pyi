# A separate typing file is used for these types here to help out mypy; there isn't a clean way
# of doing this.

from typing import AsyncGenerator, Awaitable, Generic, Optional, Sequence, TypeVar

from ..model.core import Party
from ..model.reading import \
    ContractCreateEvent, ContractExercisedEvent, Transaction
from ..model.writing import \
    CreateCommand, CreateAndExerciseCommand, CommandPayload, ExerciseByKeyCommand, \
    ExerciseCommand

T = TypeVar('T')


class LedgerConnectionPool(Generic[T]):
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def connect(self, url: str, auth_token: 'Optional[str]' = None, party: 'Optional[Party]' = None) -> 'T': ...
    def close(self): ...


class AsyncLedgerConnection:
    def submit(self, command: 'CommandPayload') -> 'Awaitable[None]': ...
    def submit_create(self, command: 'CreateCommand') -> 'Awaitable[ContractCreateEvent]': ...
    def submit_create_and_exercise(self, command: 'CreateAndExerciseCommand') -> 'Awaitable[ContractExercisedEvent]': ...
    def submit_exercise(self, command: 'ExerciseCommand') -> 'ContractExercisedEvent': ...
    def submit_exercise_by_key(self, command: 'ExerciseByKeyCommand') -> 'ContractExercisedEvent': ...
    def query(self, q: 'QueryRequest') -> 'AsyncGenerator[Transaction, None, None]': ...
    def fetch_acs(self, template_ids: 'Sequence[str]') -> 'Awaitable[ActiveContractSet]': ...
    def fetch_package_ids(self) -> 'Awaitable[PackageRefSet]': ...
    def fetch_package_bytes(self, package_id: 'PackageRef') -> 'Awaitable[bytes]': ...
    def upload_package_bytes(self, contents: bytes) -> 'Awaitable[None]': ...


class BlockingLedgerConnection:
    def submit(self, command: 'CommandPayload') -> None: ...
    def submit_create(self, command: 'CreateCommand') -> 'CreatedEvent': ...
    def submit_create_and_exercise(self, command: 'CreateAndExerciseCommand') -> 'ExercisedEvent': ...
    def submit_exercise(self, command: 'ExerciseCommand') -> 'ExercisedEvent': ...
    def submit_exercise_by_key(self, command: 'ExerciseByKeyCommand') -> 'ExercisedEvent': ...
    def query(self, q: 'QueryRequest') -> 'Generator[Transaction, None, None]': ...
    def fetch_acs(self, template_ids: 'Sequence[str]') -> 'ActiveContractSet': ...
    def fetch_package_ids(self) -> 'PackageRefSet': ...
    def fetch_package_bytes(self, package_id: 'PackageRef') -> bytes: ...
    def upload_package_bytes(self, contents: bytes) -> None: ...
