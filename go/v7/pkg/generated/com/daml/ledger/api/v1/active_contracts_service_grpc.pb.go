// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ActiveContractsServiceClient is the client API for ActiveContractsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveContractsServiceClient interface {
	// Returns a stream of the latest snapshot of active contracts.
	// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
	// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
	// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
	GetActiveContracts(ctx context.Context, in *GetActiveContractsRequest, opts ...grpc.CallOption) (ActiveContractsService_GetActiveContractsClient, error)
}

type activeContractsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveContractsServiceClient(cc grpc.ClientConnInterface) ActiveContractsServiceClient {
	return &activeContractsServiceClient{cc}
}

var activeContractsServiceGetActiveContractsStreamDesc = &grpc.StreamDesc{
	StreamName:    "GetActiveContracts",
	ServerStreams: true,
}

func (c *activeContractsServiceClient) GetActiveContracts(ctx context.Context, in *GetActiveContractsRequest, opts ...grpc.CallOption) (ActiveContractsService_GetActiveContractsClient, error) {
	stream, err := c.cc.NewStream(ctx, activeContractsServiceGetActiveContractsStreamDesc, "/com.daml.ledger.api.v1.ActiveContractsService/GetActiveContracts", opts...)
	if err != nil {
		return nil, err
	}
	x := &activeContractsServiceGetActiveContractsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActiveContractsService_GetActiveContractsClient interface {
	Recv() (*GetActiveContractsResponse, error)
	grpc.ClientStream
}

type activeContractsServiceGetActiveContractsClient struct {
	grpc.ClientStream
}

func (x *activeContractsServiceGetActiveContractsClient) Recv() (*GetActiveContractsResponse, error) {
	m := new(GetActiveContractsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActiveContractsServiceService is the service API for ActiveContractsService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterActiveContractsServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ActiveContractsServiceService struct {
	// Returns a stream of the latest snapshot of active contracts.
	// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
	// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
	// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
	GetActiveContracts func(*GetActiveContractsRequest, ActiveContractsService_GetActiveContractsServer) error
}

func (s *ActiveContractsServiceService) getActiveContracts(_ interface{}, stream grpc.ServerStream) error {
	if s.GetActiveContracts == nil {
		return status.Errorf(codes.Unimplemented, "method GetActiveContracts not implemented")
	}
	m := new(GetActiveContractsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.GetActiveContracts(m, &activeContractsServiceGetActiveContractsServer{stream})
}

type ActiveContractsService_GetActiveContractsServer interface {
	Send(*GetActiveContractsResponse) error
	grpc.ServerStream
}

type activeContractsServiceGetActiveContractsServer struct {
	grpc.ServerStream
}

func (x *activeContractsServiceGetActiveContractsServer) Send(m *GetActiveContractsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterActiveContractsServiceService registers a service implementation with a gRPC server.
func RegisterActiveContractsServiceService(s grpc.ServiceRegistrar, srv *ActiveContractsServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "com.daml.ledger.api.v1.ActiveContractsService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "GetActiveContracts",
				Handler:       srv.getActiveContracts,
				ServerStreams: true,
			},
		},
		Metadata: "com/daml/ledger/api/v1/active_contracts_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewActiveContractsServiceService creates a new ActiveContractsServiceService containing the
// implemented methods of the ActiveContractsService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewActiveContractsServiceService(s interface{}) *ActiveContractsServiceService {
	ns := &ActiveContractsServiceService{}
	if h, ok := s.(interface {
		GetActiveContracts(*GetActiveContractsRequest, ActiveContractsService_GetActiveContractsServer) error
	}); ok {
		ns.GetActiveContracts = h.GetActiveContracts
	}
	return ns
}

// UnstableActiveContractsServiceService is the service API for ActiveContractsService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableActiveContractsServiceService interface {
	// Returns a stream of the latest snapshot of active contracts.
	// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
	// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
	// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
	GetActiveContracts(*GetActiveContractsRequest, ActiveContractsService_GetActiveContractsServer) error
}
