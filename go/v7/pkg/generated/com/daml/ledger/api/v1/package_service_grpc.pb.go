// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageServiceClient interface {
	// Returns the identifiers of all supported packages.
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	// Returns the contents of a single package, or a ``NOT_FOUND`` error if the requested package is unknown.
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	// Returns the status of a single package.
	GetPackageStatus(ctx context.Context, in *GetPackageStatusRequest, opts ...grpc.CallOption) (*GetPackageStatusResponse, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

var packageServiceListPackagesStreamDesc = &grpc.StreamDesc{
	StreamName: "ListPackages",
}

func (c *packageServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.PackageService/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var packageServiceGetPackageStreamDesc = &grpc.StreamDesc{
	StreamName: "GetPackage",
}

func (c *packageServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.PackageService/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var packageServiceGetPackageStatusStreamDesc = &grpc.StreamDesc{
	StreamName: "GetPackageStatus",
}

func (c *packageServiceClient) GetPackageStatus(ctx context.Context, in *GetPackageStatusRequest, opts ...grpc.CallOption) (*GetPackageStatusResponse, error) {
	out := new(GetPackageStatusResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.PackageService/GetPackageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceService is the service API for PackageService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterPackageServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type PackageServiceService struct {
	// Returns the identifiers of all supported packages.
	ListPackages func(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	// Returns the contents of a single package, or a ``NOT_FOUND`` error if the requested package is unknown.
	GetPackage func(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	// Returns the status of a single package.
	GetPackageStatus func(context.Context, *GetPackageStatusRequest) (*GetPackageStatusResponse, error)
}

func (s *PackageServiceService) listPackages(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.ListPackages == nil {
		return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
	}
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.PackageService/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PackageServiceService) getPackage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetPackage == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
	}
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.PackageService/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PackageServiceService) getPackageStatus(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetPackageStatus == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetPackageStatus not implemented")
	}
	in := new(GetPackageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetPackageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.PackageService/GetPackageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackageStatus(ctx, req.(*GetPackageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterPackageServiceService registers a service implementation with a gRPC server.
func RegisterPackageServiceService(s grpc.ServiceRegistrar, srv *PackageServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "com.daml.ledger.api.v1.PackageService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListPackages",
				Handler:    srv.listPackages,
			},
			{
				MethodName: "GetPackage",
				Handler:    srv.getPackage,
			},
			{
				MethodName: "GetPackageStatus",
				Handler:    srv.getPackageStatus,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "com/daml/ledger/api/v1/package_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewPackageServiceService creates a new PackageServiceService containing the
// implemented methods of the PackageService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewPackageServiceService(s interface{}) *PackageServiceService {
	ns := &PackageServiceService{}
	if h, ok := s.(interface {
		ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	}); ok {
		ns.ListPackages = h.ListPackages
	}
	if h, ok := s.(interface {
		GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	}); ok {
		ns.GetPackage = h.GetPackage
	}
	if h, ok := s.(interface {
		GetPackageStatus(context.Context, *GetPackageStatusRequest) (*GetPackageStatusResponse, error)
	}); ok {
		ns.GetPackageStatus = h.GetPackageStatus
	}
	return ns
}

// UnstablePackageServiceService is the service API for PackageService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstablePackageServiceService interface {
	// Returns the identifiers of all supported packages.
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	// Returns the contents of a single package, or a ``NOT_FOUND`` error if the requested package is unknown.
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	// Returns the status of a single package.
	GetPackageStatus(context.Context, *GetPackageStatusRequest) (*GetPackageStatusResponse, error)
}
