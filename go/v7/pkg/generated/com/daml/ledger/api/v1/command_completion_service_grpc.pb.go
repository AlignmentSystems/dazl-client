// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CommandCompletionServiceClient is the client API for CommandCompletionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandCompletionServiceClient interface {
	// Subscribe to command completion events.
	CompletionStream(ctx context.Context, in *CompletionStreamRequest, opts ...grpc.CallOption) (CommandCompletionService_CompletionStreamClient, error)
	// Returns the offset after the latest completion.
	CompletionEnd(ctx context.Context, in *CompletionEndRequest, opts ...grpc.CallOption) (*CompletionEndResponse, error)
}

type commandCompletionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandCompletionServiceClient(cc grpc.ClientConnInterface) CommandCompletionServiceClient {
	return &commandCompletionServiceClient{cc}
}

var commandCompletionServiceCompletionStreamStreamDesc = &grpc.StreamDesc{
	StreamName:    "CompletionStream",
	ServerStreams: true,
}

func (c *commandCompletionServiceClient) CompletionStream(ctx context.Context, in *CompletionStreamRequest, opts ...grpc.CallOption) (CommandCompletionService_CompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, commandCompletionServiceCompletionStreamStreamDesc, "/com.daml.ledger.api.v1.CommandCompletionService/CompletionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandCompletionServiceCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandCompletionService_CompletionStreamClient interface {
	Recv() (*CompletionStreamResponse, error)
	grpc.ClientStream
}

type commandCompletionServiceCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *commandCompletionServiceCompletionStreamClient) Recv() (*CompletionStreamResponse, error) {
	m := new(CompletionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var commandCompletionServiceCompletionEndStreamDesc = &grpc.StreamDesc{
	StreamName: "CompletionEnd",
}

func (c *commandCompletionServiceClient) CompletionEnd(ctx context.Context, in *CompletionEndRequest, opts ...grpc.CallOption) (*CompletionEndResponse, error) {
	out := new(CompletionEndResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.CommandCompletionService/CompletionEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandCompletionServiceService is the service API for CommandCompletionService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCommandCompletionServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CommandCompletionServiceService struct {
	// Subscribe to command completion events.
	CompletionStream func(*CompletionStreamRequest, CommandCompletionService_CompletionStreamServer) error
	// Returns the offset after the latest completion.
	CompletionEnd func(context.Context, *CompletionEndRequest) (*CompletionEndResponse, error)
}

func (s *CommandCompletionServiceService) completionStream(_ interface{}, stream grpc.ServerStream) error {
	if s.CompletionStream == nil {
		return status.Errorf(codes.Unimplemented, "method CompletionStream not implemented")
	}
	m := new(CompletionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.CompletionStream(m, &commandCompletionServiceCompletionStreamServer{stream})
}
func (s *CommandCompletionServiceService) completionEnd(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.CompletionEnd == nil {
		return nil, status.Errorf(codes.Unimplemented, "method CompletionEnd not implemented")
	}
	in := new(CompletionEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CompletionEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.CommandCompletionService/CompletionEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CompletionEnd(ctx, req.(*CompletionEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

type CommandCompletionService_CompletionStreamServer interface {
	Send(*CompletionStreamResponse) error
	grpc.ServerStream
}

type commandCompletionServiceCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *commandCompletionServiceCompletionStreamServer) Send(m *CompletionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterCommandCompletionServiceService registers a service implementation with a gRPC server.
func RegisterCommandCompletionServiceService(s grpc.ServiceRegistrar, srv *CommandCompletionServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "com.daml.ledger.api.v1.CommandCompletionService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CompletionEnd",
				Handler:    srv.completionEnd,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "CompletionStream",
				Handler:       srv.completionStream,
				ServerStreams: true,
			},
		},
		Metadata: "com/daml/ledger/api/v1/command_completion_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewCommandCompletionServiceService creates a new CommandCompletionServiceService containing the
// implemented methods of the CommandCompletionService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewCommandCompletionServiceService(s interface{}) *CommandCompletionServiceService {
	ns := &CommandCompletionServiceService{}
	if h, ok := s.(interface {
		CompletionStream(*CompletionStreamRequest, CommandCompletionService_CompletionStreamServer) error
	}); ok {
		ns.CompletionStream = h.CompletionStream
	}
	if h, ok := s.(interface {
		CompletionEnd(context.Context, *CompletionEndRequest) (*CompletionEndResponse, error)
	}); ok {
		ns.CompletionEnd = h.CompletionEnd
	}
	return ns
}

// UnstableCommandCompletionServiceService is the service API for CommandCompletionService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableCommandCompletionServiceService interface {
	// Subscribe to command completion events.
	CompletionStream(*CompletionStreamRequest, CommandCompletionService_CompletionStreamServer) error
	// Returns the offset after the latest completion.
	CompletionEnd(context.Context, *CompletionEndRequest) (*CompletionEndResponse, error)
}
