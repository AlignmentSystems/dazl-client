// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	// Submits a single composite command and waits for its result.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWait(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Submits a single composite command, waits for its result, and returns the transaction id.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionId(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionIdResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransaction(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction tree.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionTree(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionTreeResponse, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

var commandServiceSubmitAndWaitStreamDesc = &grpc.StreamDesc{
	StreamName: "SubmitAndWait",
}

func (c *commandServiceClient) SubmitAndWait(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.CommandService/SubmitAndWait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var commandServiceSubmitAndWaitForTransactionIdStreamDesc = &grpc.StreamDesc{
	StreamName: "SubmitAndWaitForTransactionId",
}

func (c *commandServiceClient) SubmitAndWaitForTransactionId(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionIdResponse, error) {
	out := new(SubmitAndWaitForTransactionIdResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransactionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var commandServiceSubmitAndWaitForTransactionStreamDesc = &grpc.StreamDesc{
	StreamName: "SubmitAndWaitForTransaction",
}

func (c *commandServiceClient) SubmitAndWaitForTransaction(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionResponse, error) {
	out := new(SubmitAndWaitForTransactionResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var commandServiceSubmitAndWaitForTransactionTreeStreamDesc = &grpc.StreamDesc{
	StreamName: "SubmitAndWaitForTransactionTree",
}

func (c *commandServiceClient) SubmitAndWaitForTransactionTree(ctx context.Context, in *SubmitAndWaitRequest, opts ...grpc.CallOption) (*SubmitAndWaitForTransactionTreeResponse, error) {
	out := new(SubmitAndWaitForTransactionTreeResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransactionTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceService is the service API for CommandService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCommandServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CommandServiceService struct {
	// Submits a single composite command and waits for its result.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWait func(context.Context, *SubmitAndWaitRequest) (*empty.Empty, error)
	// Submits a single composite command, waits for its result, and returns the transaction id.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionId func(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionIdResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransaction func(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction tree.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionTree func(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionTreeResponse, error)
}

func (s *CommandServiceService) submitAndWait(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SubmitAndWait == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SubmitAndWait not implemented")
	}
	in := new(SubmitAndWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SubmitAndWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.CommandService/SubmitAndWait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SubmitAndWait(ctx, req.(*SubmitAndWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CommandServiceService) submitAndWaitForTransactionId(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SubmitAndWaitForTransactionId == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SubmitAndWaitForTransactionId not implemented")
	}
	in := new(SubmitAndWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SubmitAndWaitForTransactionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransactionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SubmitAndWaitForTransactionId(ctx, req.(*SubmitAndWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CommandServiceService) submitAndWaitForTransaction(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SubmitAndWaitForTransaction == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SubmitAndWaitForTransaction not implemented")
	}
	in := new(SubmitAndWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SubmitAndWaitForTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SubmitAndWaitForTransaction(ctx, req.(*SubmitAndWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CommandServiceService) submitAndWaitForTransactionTree(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SubmitAndWaitForTransactionTree == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SubmitAndWaitForTransactionTree not implemented")
	}
	in := new(SubmitAndWaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SubmitAndWaitForTransactionTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/com.daml.ledger.api.v1.CommandService/SubmitAndWaitForTransactionTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SubmitAndWaitForTransactionTree(ctx, req.(*SubmitAndWaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCommandServiceService registers a service implementation with a gRPC server.
func RegisterCommandServiceService(s grpc.ServiceRegistrar, srv *CommandServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "com.daml.ledger.api.v1.CommandService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SubmitAndWait",
				Handler:    srv.submitAndWait,
			},
			{
				MethodName: "SubmitAndWaitForTransactionId",
				Handler:    srv.submitAndWaitForTransactionId,
			},
			{
				MethodName: "SubmitAndWaitForTransaction",
				Handler:    srv.submitAndWaitForTransaction,
			},
			{
				MethodName: "SubmitAndWaitForTransactionTree",
				Handler:    srv.submitAndWaitForTransactionTree,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "com/daml/ledger/api/v1/command_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewCommandServiceService creates a new CommandServiceService containing the
// implemented methods of the CommandService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewCommandServiceService(s interface{}) *CommandServiceService {
	ns := &CommandServiceService{}
	if h, ok := s.(interface {
		SubmitAndWait(context.Context, *SubmitAndWaitRequest) (*empty.Empty, error)
	}); ok {
		ns.SubmitAndWait = h.SubmitAndWait
	}
	if h, ok := s.(interface {
		SubmitAndWaitForTransactionId(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionIdResponse, error)
	}); ok {
		ns.SubmitAndWaitForTransactionId = h.SubmitAndWaitForTransactionId
	}
	if h, ok := s.(interface {
		SubmitAndWaitForTransaction(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionResponse, error)
	}); ok {
		ns.SubmitAndWaitForTransaction = h.SubmitAndWaitForTransaction
	}
	if h, ok := s.(interface {
		SubmitAndWaitForTransactionTree(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionTreeResponse, error)
	}); ok {
		ns.SubmitAndWaitForTransactionTree = h.SubmitAndWaitForTransactionTree
	}
	return ns
}

// UnstableCommandServiceService is the service API for CommandService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableCommandServiceService interface {
	// Submits a single composite command and waits for its result.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWait(context.Context, *SubmitAndWaitRequest) (*empty.Empty, error)
	// Submits a single composite command, waits for its result, and returns the transaction id.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionId(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionIdResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransaction(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionResponse, error)
	// Submits a single composite command, waits for its result, and returns the transaction tree.
	// Returns ``RESOURCE_EXHAUSTED`` if the number of in-flight commands reached the maximum (if a limit is configured).
	// Propagates the gRPC error of failed submissions including DAML interpretation errors.
	SubmitAndWaitForTransactionTree(context.Context, *SubmitAndWaitRequest) (*SubmitAndWaitForTransactionTreeResponse, error)
}
